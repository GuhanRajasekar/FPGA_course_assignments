import matplotlib.pyplot as plt

def isNegative(num):
  if(num[0] == "1"):
    return True
  return False

def getTwosComplement(num):
  pos = 0
  result = list(num)  # convert string to a list as strings are immutable
  # range(start,stop,step)
  for i in range(19,-1,-1):
    if(result[i] == "1"):
     pos = i
     break
  
  for i in range(pos-1,-1,-1):
    if(result[i]=="1"):
      result[i] = "0"
    else:
      result[i] = "1"  
  
  result_string = ''.join(result) # to convert the list to string
  return(result_string)

# pos indicates the number of bits from the LSB end after which the binary point is present
def getDecimalValue(num,pos):
  res = 0
  power = 20-pos
  flag = 0
  if(isNegative(num)):
    num = getTwosComplement(num)
    flag = 1
  
  for i in range(0,19):    
    res = res + ((2**power) * int(num[i]))
    power = power - 1
    if(power == 0):
      power = -1
  
  if(flag == 1):
    return (-1*res)
  return res
    

def printValues(arr):
  for i in range(0, len(arr)):
    print(arr[i])

def main():
  conv_list = []  #empty list
  arr = [
    "00001111111111111000", "00001111111111101100", "00001111111111010010", "00001111111110100110", "00001111111101001010",
    "00001111111011111010", "00001111111010011010", "00001111111000101000", "00001111110101100000", "00001111110011001000",
    "00001111110000011110", "00001111101101100110", "00001111101010011101", "00001111100101010100", "00001111100001100101",
    "00001111011101100111", "00001111010111001001", "00001111010010100100", "00001111001101110000", "00001111001000111001",
    "00001111000000111000", "00001110111011010000", "00001110110101010110", "00001110101111010000", "00001110100101101010",
    "00001110011111000001", "00001110011000001001", "00001110010001000010", "00001110000101111100", "00001101111110001111",
    "00001101110110010111", "00001101101110010000", "00001101100001101101", "00001101011001100111", "00001101010000110001",
    "00001101000111101111", "00001100111001110001", "00001100110000001110", "00001100100110011110", "00001100011100100001",
    "00001100010010011100", "00001100000010111001", "00001011111000010010", "00001011101101011111", "00001011011100111010",
    "00001011010110010110",

    "00001011000101001111", "00001010111001100111", "00001010101101110101", "00001010100001110111", "00001010001111101001",
    "00001010000011010111", "00001001110110110110", "00001001101010001100", "00001001010110111000", "00001001001001110110",
    "00001000111100101001", "00001000101111010101", "00001000100010110010", "00001000001110010111", "00001000000000100101",
    "00000111110010101011", "00000111011101100110", "00000111001111011000", "00000111000001000100", "00000110110010110000",
    "00000110100100001111", "00000110001110010000", "00000101111111011111", "00000101110000100111", "00000101011010000111",
    "00000101001011000010", "00000100111100100001", "00000100101101010010", "00000100010110010001", "00000100000110110111",
    "00000011110111011000", "00000011100111110100", "00000011010000011011", "00000011000000110110", "00000010110001001000",
    "00000010100001010101", "00000010001001100111", "00000001111001110000", "00000001101001110111", "00000001011001111110",
    "00000001001011000110", "00000000110011001100", "00000000100011001101", "00000000010011001111", "11111111111011001110",

    "11111111101100110001", "11111111011100110011", "11111111001100110100", "11111110110100111010",
    "11111110100110000010", "11111110010110001001", "11111110000110010000", "11111101101110011110",
    "11111101011110101011", "11111101001110111000", "11111100111111001010", "11111100101111100101",
    "11111100011000001100", "11111100001000101000", "11111011111001001001", "11111011100010000010",
    "11111011010010101110", "11111011000011011111", "11111010110100111110", "11111010011110010110",
    "11111010001111011001", "11111010000000100001", "11111001110001110000", "11111001011011110001",
    "11111001001101010000", "11111000111110111100", "11111000110000101000", "11111000011011010111",
    "11111000001101010101", "11110111111111011011", "11110111110001101001", "11110111011101001110",
    "11110111010000101011", "11110111000011010111", "11110110110110001010", "11110110100010101000",
    "11110110010101110100", "11110110001001001010", "11110101111100101001", "11110101110000010111",
    "11110101011110001001", "11110101010010001011", "11110101000110011001", "11110100110101000010",
    "11110100101110010110", "11110100011101100001", "11110100010010100001", "11110100000111101110",
    "11110011111101000111", "11110011101101100100", "11110011100011011111", "11110011011001100010",
    "11110011001111110010", "11110011000001100000", "11110010111000010001", "11110010101111001111",
    "11110010100110011001", "11110010011110010011", "11110010010001110000", "11110010001001101001"
]
  
  for i in range(0, len(arr)):
    conv_list.append(getDecimalValue(arr[i],16))
  
  x = []
  for i in range(0,151):
    x.append(i)
  
  plt.plot(x,conv_list)
  plt.show()

if __name__ == "__main__":
  main()